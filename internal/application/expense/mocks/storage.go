// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Lexv0lk/expense-tracker-tui/internal/domain (interfaces: ExpenseStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	domain "github.com/Lexv0lk/expense-tracker-tui/internal/domain"
	gomock "github.com/golang/mock/gomock"
)

// MockExpenseStorage is a mock of ExpenseStorage interface.
type MockExpenseStorage struct {
	ctrl     *gomock.Controller
	recorder *MockExpenseStorageMockRecorder
}

// MockExpenseStorageMockRecorder is the mock recorder for MockExpenseStorage.
type MockExpenseStorageMockRecorder struct {
	mock *MockExpenseStorage
}

// NewMockExpenseStorage creates a new mock instance.
func NewMockExpenseStorage(ctrl *gomock.Controller) *MockExpenseStorage {
	mock := &MockExpenseStorage{ctrl: ctrl}
	mock.recorder = &MockExpenseStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExpenseStorage) EXPECT() *MockExpenseStorageMockRecorder {
	return m.recorder
}

// Load mocks base method.
func (m *MockExpenseStorage) Load() ([]domain.Expense, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load")
	ret0, _ := ret[0].([]domain.Expense)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Load indicates an expected call of Load.
func (mr *MockExpenseStorageMockRecorder) Load() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockExpenseStorage)(nil).Load))
}

// Save mocks base method.
func (m *MockExpenseStorage) Save(arg0 []domain.Expense) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockExpenseStorageMockRecorder) Save(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockExpenseStorage)(nil).Save), arg0)
}
